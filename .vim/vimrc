" Configuration file for (n)vim
" Last change: 2018 Aug 12
" Maintainer: David Nebauer
" License: GPL3

" Uses subsidiary configuration files in 'rc' subdirectory, and
" uses function file $VIMHOME/autoload/dn/rc.vim

" NOTES:    {{{1
" detect whether running vim or nvim    {{{2
" - now that vim has ':terminal' command cannot distinguish between
"   vim|nvim using ':shell' and ':terminal', respectively
" - vim no longer has('vim') but nvim has('nvim') so use that
"   . vim:  if !has('nvim')
"   . nvim: if has('nvim')    }}}2

" PLUGINS:    {{{1
" using github.com/shougo/dein.vim
" python required by several plugins    {{{2
" - in python 3.5 there is no python3 exe installed
if has('nvim') && dn#rc#os() ==# 'windows'
    call dn#rc#configureWinPython()
endif
" - in *nix can get non-deb python exes in /bin/ as well as /usr/bin/
"   and neovim's checkhealth command recommends using g:python[3]_host_prog
if !empty(glob('/usr/bin/python2', 1, 1)) && !empty(glob('/bin/python2', 1, 1))
    let g:python_host_prog = '/usr/bin/python2'
endif
if !empty(glob('/usr/bin/python3', 1, 1)) && !empty(glob('/bin/python3', 1, 1))
    let g:python3_host_prog = '/usr/bin/python3'
endif
" dein requirements    {{{2
" - required tools and vim version    {{{3
if !dn#rc#hasDeinRequirements()
    " function displays error message if fails
    finish
endif
" - required settings    {{{3
"   vint: -ProhibitSetNoCompatible
set nocompatible
filetype off
" how to install/update plugins with dein    {{{2
" - install new plugins
"   . in vim : call dein#install()
"   . shell  : vim "+call dein#install()" +qall
" - update all plugins
"   . in vim : call dein#update()
"   . shell  : vim "+call dein#update()" +qall
" dein events    {{{2
" - VimEnter    {{{3
"   . many important dein-related function calls are made at this event
"   . all post_source hooks are called at VimEnter
" dein configuration    {{{2
" - asynchronous plugin updates    {{{3
"   . when running dein in nvim on windows, updating plugins with the
"     default number of asynchronous processes (8) results in many
"     updates failing
"   . the git operation fails with the message:
"     'Received HTTP code 407 from proxy after CONNECT'
"   . the particular plugins affected in a run are unpredictable, i.e.,
"     a plugin whose update fails in one run will successfully update
"     in the following run
"   . this brute force solution turns off asynchronous updating, so
"     each plugin updates in sequence (but the whole run takes *much*
"     longer)
if has('nvim') && dn#rc#os() ==# 'windows'
    let g:dein#install_max_processes = 1
endif
" ensure dein is installed    {{{2
if !isdirectory(dn#rc#pluginRoot('dein'))
    if !dn#rc#installDein() | finish | endif
endif
" load dein    {{{2
if &runtimepath !~# '/dein.vim'
    execute 'set runtimepath+=' . dn#rc#pluginRoot('dein')
endif
if dein#load_state(dn#rc#pluginsDir())
    call dein#begin(dn#rc#pluginsDir())
    call dein#add(dn#rc#pluginRoot('dein'))
    call dein#add('shougo/dein.vim')
    if !has('nvim')
        call dein#add('roxma/nvim-yarp')
        call dein#add('roxma/vim-hug-neovim-rpc')
    endif
    " dein commands    {{{2
    call dein#add('haya14busa/dein-command.vim', {
                \ 'on_cmd' : ['Dein'],
                \ })
    " bundles: utilities    {{{2
    " - vimproc : asynchronous execution    {{{3
    "   . build default is 'make' except for MinGW on windows
    call dein#add('shougo/vimproc.vim', {
                \ 'build' : dn#rc#vimprocBuild(),
                \ })
    " - neoinclude : completion framework helper    {{{3
    call dein#add('shougo/neoinclude.vim')
    " - dn-utils : general utilities    {{{3
    call dein#add('dnebauer/vim-dn-utils')
    " - dn-logevents : log autocmd events    {{{3
    call dein#add('dnebauer/vim-dn-logevents', {
                \ 'on_cmd' : ['LogEvents',    'EventLoggingStatus',
                \             'EventLogFile', 'AnnotateEventLog',
                \             'DeleteEventLog']
                \ })
    " - repeat : plugin helper for repeating commands    {{{3
    call dein#add('tpope/vim-repeat', {
                \ 'on_source' : ['vim-surround'],
                \ })
    " - context_filetype : plugin helper    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_source': ['deoplete.nvim', 'neocomplete.vim',
    "                      'echodoc.vim', 'neosnippet.vim'], 'lazy': 1}
    call dein#add('shougo/context_filetype.vim')
    " - bclose : delete buffer without closing window    {{{3
    call dein#add('rbgrouleff/bclose.vim', {
                \ 'on_source' : ['ranger.vim'],
                \ })
    " - fastfold : reduce frequency of folding    {{{3
    "   . required by neocomplete
    call dein#add('konfekt/fastfold')
    " bundles: shell integration    {{{2
    " - vimshell : shell emulation    {{{3
    call dein#add('shougo/vimshell.vim', {
                \ 'depends' : ['vimproc.vim'],
                \ 'on_cmd'  : ['VimShell',           'VimShellCreate',
                \              'VimShellTab',        'VimShellPop',
                \              'VimShellCurrentDir', 'VimShellBufferDir',
                \              'VimShellExecute',    'VimShellInteractive',
                \              'VimShellSendString', 'VimShellSendBuffer',
                \              'VimShellClose'],
                \ })
    " - file-line : open vim on given line    {{{3
    call dein#add('bogado/file-line')
    " - superman : shell uses vim as manpage viewer    {{{3
    call dein#add('dnebauer/vim-superman', {
                \ 'if' : 'has("unix")',
                \ })
    " - eunuch : unix shell commands as vim commands    {{{3
    "   . disable plugin-set autocommands after sourcing because they
    "     a) make all new files executable (not desirable), and
    "     b) insert templates into new files (conflicts with
    "        template plugins)
    call dein#add('tpope/vim-eunuch', {
                \ 'if'               : 'has("unix")',
                \ 'on_cmd'           : ['Remove',    'Unlink', 'Move',
                \                       'Rename',    'Chmod',  'Mkdir',
                \                       'Find',      'Locate', 'Wall',
                \                       'SudoWrite', 'SudoEdit'],
                \ 'hook_post_source' :  'augroup! eunuch',
                \ })
    " - vimpager : unix shell uses vim as pager    {{{3
    "   . sets shell PAGER variable to use vim
    "   . sets alias 'less' to $PAGER
    call dein#add('rkitover/vimpager', {
                \ 'if'     : 'has("unix")',
                \ 'on_cmd' : ['Page'],
                \ })
    " - iron : read-val-print loop (REPL)    {{{3
    call dein#add('hkupty/iron.nvim', {
                \ 'if'     : 'has("nvim")',
                \ 'on_cmd' : ['IronRepl', 'IronPromptRepl'],
                \ })
    " - codi : interactive scratchpad (REPL)    {{{3
    "   . TODO: disable linting engines while in codi
    call dein#add('metakirby5/codi.vim', {
                \ 'if'     :   'has("nvim") || '
                \            . '(exists("+job") && exists("+channel"))',
                \ 'on_cmd' : ['Codi'],
                \ })
    " bundles: editing    {{{2
    " - unimpaired : various paired mappings    {{{3
    call dein#add('tpope/vim-unimpaired', {
                \ 'depends' : ['vim-repeat'],
                \ })
    " - surround : delete/change surrounding parens, etc.    {{{3
    call dein#add('tpope/vim-surround')
    " - commentary : comment and uncomment lines    {{{3
    call dein#add('tpope/vim-commentary', {
                \ 'on_cmd' : ['Commentary', 'CommentaryLine',
                \             'ChangeCommentary'],
                \ 'on_map' : {'x': ['gc'],
                \             'n': ['gc', 'gcc', 'cgc', 'gcu'],
                \             'o': ['gc']},
                \ })
    " - gundo : undo tree    {{{3
    call dein#add('sjl/gundo.vim', {
                \ 'on_cmd' : ['GundoToggle'],
                \ })
    " - DeleteTrailingWhitespace : delete trailing whitespace    {{{3
    call dein#add('vim-scripts/DeleteTrailingWhitespace')
    " - textobj-entire : select entire content of buffer    {{{3
    "   . requires kana/vim-textobj-user
    "   . cannot load dependency via depends in vim or on_source in nvim
    call dein#add('kana/vim-textobj-user')
    call dein#add('kana/vim-textobj-entire')
    " - unicode : unicode/digraph handling    {{{3
    "   . using 'on_cmd' results in error in airline plugin:
    "     'E117: Unknown function: airline#extensions#unicode#init'
    "   . so load on startup
    call dein#add('chrisbra/unicode.vim')
    " - multiple-cursors : multiple selections    {{{3
    call dein#add('terryma/vim-multiple-cursors')
    " bundles: encryption    {{{2
    " - gnupg : transparently edit gpg-encrypted files    {{{3
    call dein#add('jamessan/vim-gnupg')
    " bundles: searching and finding    {{{2
    " - ranger : curses-based file explorer    {{{3
    if dn#rc#os() !=# 'windows'
        call dein#add('francoiscabrol/ranger.vim', {
                    \ 'if' : 'executable("ranger")',
                    \ })
    endif
    " - vinegar : enhance netrw directory browser    {{{3
    call dein#add('tpope/vim-vinegar')
    "   . hide dot files
    let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
    " - visual-star-search : search for selected text    {{{3
    call dein#add('bronson/vim-visual-star-search')
    " - denite : integrated information display    {{{3
    "   . gave up loading denite on demand as the dependencies are
    "     too fragile; only works dependably if force load at start
    call dein#add('shougo/denite.nvim', {
                \ 'depends'          : ['neoinclude.vim', 'neomru.vim'],
                \ 'hook_post_source' : 'call dn#rc#configureDenite()',
                \ })
    " - neomru : denite helper - recently used files    {{{3
    call dein#add('shougo/neomru.vim')
    " - session : denite helper - extra sources    {{{3
    call dein#add('chemzqm/denite-extra')
    " - global : denite helper - global/gtags    {{{3
    call dein#add('ozelentok/denite-gtags', {
                \ 'if' : 'executable("global") && executable("gtags")',
                \ })
    " - ale : denite helper - ale errors/warnings    {{{3
    if dn#rc#lintEngine() ==# 'ale'
        call dein#add('iyuuya/denite-ale')
    endif
    " bundles: cut and paste    {{{2
    " - highlightedyank : highlight yanked text    {{{3
    call dein#add('machakann/vim-highlightedyank')
    if !has('nvim')
        map y <Plug>(highlightedyank)
    endif
    " bundles: templates    {{{2
    " - template : file templates    {{{3
    call dein#add('hotoo/template.vim')
    " bundles: internet    {{{2
    " - vim-g : google lookup    {{{3
    call dein#add('szw/vim-g', {
                \ 'if'     : 'executable("perl")',
                \ 'on_cmd' : ['Google', 'Googlef'],
                \ })
    " - webapi : web browser API    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'lazy': 1}
    call dein#add('mattn/webapi-vim')
    " - quicklink : md-specific web lookup and link inserter    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['markdown', 'markdown.pandoc']}
    call dein#add('christoomey/vim-quicklink', {
                \ 'depends' : ['webapi-vim'],
                \ })
    " - open-browser : open uri in browser    {{{3
    call dein#add('tyru/open-browser.vim', {
                \ 'on_cmd' : ['OpenBrowser', 'OpenBrowserSearch',
                \             'OpenBrowserSmartSearch'],
                \ 'on_map' : {'n': ['<Plug>(openbrowser-smart-search)'],
                \             'v': ['<Plug>(openbrowser-smart-search)']},
                \ })
    " - whatdomain : look up top level domain    {{{3
    call dein#add('vim-scripts/whatdomain.vim', {
                \ 'on_cmd'  : ['WhatDomain'],
                \ 'on_func' : ['WhatDomain'],
                \ })
    " - w3m : console browser    {{{3
    call dein#add('yuratomo/w3m.vim', {
                \ 'if'     : 'executable("w3m")',
                \ 'on_cmd' : ['W3m',             'W3mTab',
                \             'W3mSplit',        'W3mVSplit',
                \             'W3m',             'W3mClose',
                \             'W3mCopyUrl',      'W3mReload',
                \             'W3mAddressBar',   'W3mShowExternalBrowser',
                \             'W3mSyntaxOff',    'W3mSyntaxOn',
                \             'W3mSetUserAgent', 'W3mHistory',
                \             'W3mHistoryClear'],
                \ })
    " - address : notmuch email addresses    {{{3
    call dein#add('adborden/vim-notmuch-address', {
                \ 'on_ft' : ['mail'],
                \ })
    " bundles: printing    {{{2
    " - dn-print-dialog : pure vim print dialog    {{{3
    call dein#add('dnebauer/vim-dn-print-dialog', {
                \ 'on_cmd' :  ['PrintDialog'],
                \ 'depends' : ['vim-dn-utils'],
                \ })
    " bundles: calendar    {{{2
    " - calendar : display calendar    {{{3
    call dein#add('mattn/calendar-vim', {
                \ 'on_cmd' : ['Calendar', 'CalendarH', 'CalendarT'],
                \ })
    " bundles: completion    {{{2
    " - deoplete : nvim completion engine    {{{3
    call dein#add('shougo/deoplete.nvim', {
                \ 'if' : 'has("nvim")',
                \ })
    " - neocomplete : vim completion engine    {{{3
    call dein#add('shougo/neocomplete.vim', {
                \ 'if'               : '     !has("nvim")'
                \                    . ' &&  v:version >= 704'
                \                    . ' &&  has("lua")',
                \ 'hook_post_source' :  'call neocomplete#initialize()',
                \ })
    " - neco-syntax : completion syntax helper    {{{3
    call dein#add('shougo/neco-syntax', {
                \ 'on_source' : ['neocomplete.vim', 'deoplete.nvim'],
                \ })
    " - neco-vim : completion source helper    {{{3
    call dein#add('shougo/neco-vim', {
                \ 'on_ft' : ['vim'],
                \ })
    " - echodoc : plugin helper that prints to echo area    {{{3
    call dein#add('shougo/echodoc.vim', {
                \ 'on_event'    : ['CompleteDone'],
                \ 'hook_source' : 'call dn#rc#configureEchodoc()',
                \ })
    " - neopairs : completion helper closes paired structures    {{{3
    call dein#add('shougo/neopairs.vim', {
                \ 'on_source' : ['neocomplete.vim', 'deoplete.nvim'],
                \ 'if'        : '     v:version >= 704'
                \             . ' &&  has("patch-7.4.774")',
                \ })
    " - perlomni : perl completion    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['perl']}
    call dein#add('c9s/perlomni.vim', {
                \ 'if' : 'v:version >= 702',
                \ })
    " - delimitMate : completion helper closes paired syntax    {{{3
    call dein#add('raimondi/delimitMate', {
                \ 'on_event' : 'InsertEnter',
                \ })
    " bundles: snippets    {{{2
    " - neosnippet : snippet engine    {{{3
    call dein#add('shougo/neosnippet.vim', {
                \ 'on_event' : 'InsertCharPre',
                \ })
    " - snippets : snippet library    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_source': ['neosnippet.vim']}
    call dein#add('honza/vim-snippets')
    " bundles: formatting    {{{2
    " - tabular : align text    {{{3
    call dein#add('godlygeek/tabular', {
                \ 'on_cmd' : ['Tabularize', 'AddTabularPattern',
                \             'AddTabularPipeline'],
                \ })
    " - splitjoin : single <-> multi-line statements    {{{3
    call dein#add('andrewradev/splitjoin.vim', {
                \ 'on_cmd' : ['SplitjoinSplit', 'SplitjoinJoin'],
                \ 'on_map' : {'n': ['gS', 'gJ']},
                \ })
    " bundles: spelling, grammar, word choice    {{{2
    " - dict : online dictionary (dict client)    {{{3
    call dein#add('szw/vim-dict', {
                \ 'on_cmd' : ['Dict'],
                \ })
    " - grammarous : grammar checker    {{{3
    call dein#add('rhysd/vim-grammarous')
    " - wordy : find usage problems    {{{3
    call dein#add('reedes/vim-wordy', {
                \ 'on_cmd'  : ['Wordy',     'NoWordy',
                \              'NextWordy', 'PrevWordy'],
                \ })
    " - online-thesaurus : online thesaurus    {{{3
    call dein#add('beloglazov/vim-online-thesaurus', {
                \ 'on_cmd' : ['Thesaurus', 'OnlineThesaurusCurrentWord'],
                \ })
    " - abolish : word replace and format variable names    {{{3
    call dein#add('tpope/vim-abolish', {
                \ 'on_cmd' : ['Abolish', 'Subvert'],
                \ 'on_map' : {'n': ['crc', 'crm', 'cr_', 'crs', 'cru',
                \                   'crU', 'cr-', 'crk', 'cr.']},
                \ })
    " bundles: keyboard navigation    {{{2
    " - hardmode : restrict navigation keys    {{{3
    call dein#add('wikitopian/hardmode', {
                \ 'on_func' : ['HardMode', 'EasyMode'],
                \ })
    " - matchit : jump around matched structures    {{{3
    call dein#add('vim-scripts/matchit.zip')
    " - sneak : two-character motion plugin    {{{3
    call dein#add('justinmk/vim-sneak')
    " - vim-textobj-sentence : improve sentence text object/motion    {{{3
    call dein#add('reedes/vim-textobj-sentence', {
                \ 'depends' : ['vim-textobject-user'],
                \ })
    " - vim-lastplace : reopen files at last edit position    {{{3
    call dein#add('farmergreg/vim-lastplace')
    " bundles: ui    {{{2
    " - airline : status line    {{{3
    call dein#add('vim-airline/vim-airline', {
                \ 'if' : 'v:version >= 702',
                \ })
    " - airline-themes : airline helper    {{{3
    call dein#add('vim-airline/vim-airline-themes', {
                \ 'depends' : ['vim-airline'],
                \ })
    " - tagbar : outline viewer    {{{3
    call dein#add('majutsushi/tagbar', {
                \ 'if'     : '     v:version >= 701'
                \          . ' &&  executable("ctags")',
                \ 'on_cmd' : ['TagbarOpen',          'TagbarClose',
                \             'TagbarToggle',        'Tagbar',
                \             'TagbarOpenAutoClose', 'TagbarTogglePause',
                \             'TagbarSetFoldLevel',  'TagbarShowTag',
                \             'TagbarCurrentTag',    'TagbarGetTypeConfig',
                \             'TagbarDebug',         'TagbarDebugEnd'],
                \ })
    " - [various] : colour schemes    {{{3
    call dein#add('atelierbram/vim-colors_atelier-schemes')  " atelier
    call dein#add('morhetz/gruvbox')                         " gruvbox
    call dein#add('w0ng/vim-hybrid')                         " hybrid
    call dein#add('jonathanfilip/vim-lucius')                " lucius
    call dein#add('nlknguyen/papercolor-theme')              " papercolor
    call dein#add('vim-scripts/peaksea')                     " peaksea
    call dein#add('vim-scripts/print_bw.zip')                " print_bw
    call dein#add('jpo/vim-railscasts-theme')                " railscast
    call dein#add('altercation/vim-colors-solarized')        " solarized
    call dein#add('icymind/NeoSolarized')                    " neosolarized
    call dein#add('jnurmine/zenburn', {
                \ 'if' : '     v:version >= 704'
                \      . ' &&  has("patch-7.4.1826")',
                \ })                                         " zenburn
    " - terminus : enhance terminal integration    {{{3
    call dein#add('wincent/terminus', {
                \ 'if' : '!has("gui")'
                \ })
    " - numbers : number <->relativenumber switching    {{{3
    call dein#add('myusuf3/numbers.vim')
    " bundles: linting    {{{2
    " - ale : linter for vim/nvim    {{{3
    if dn#rc#lintEngine() ==# 'ale'
        call dein#add('w0rp/ale', {
                    \ 'hook_post_update' : 'call dn#rc#aleLinters()',
                    \ })
    endif
    " - neomake : linter for vim/nvim    {{{3
    if dn#rc#lintEngine() ==# 'neomake'
        call dein#add('neomake/neomake', {
                    \ 'hook_post_update' : 'call dn#rc#neomakeLinters()',
                    \ })
    endif
    " - syntastic : linter for vim    {{{3
    if dn#rc#lintEngine() ==# 'syntastic'
        call dein#add('scrooloose/syntastic', {
                    \ 'if' : '!has("nvim")',
                    \ })
    endif    " }}}3
    " bundles: tags    {{{2
    " - misc : plugin library used by other scripts    {{{3
    call dein#add('xolox/vim-misc', {
                \ 'if' : 'executable("ctags")',
                \ })
                " - fails in git-bash/MinTTY with error:
                "   'Failed to read temporary file...'
    " - shell : asynchronous operations in ms windows    {{{3
    call dein#add('xolox/vim-shell', {
                \ 'if' : 'executable("ctags")',
                \ })
    " - [tag generators] : decide which tag plugin to load    {{{3
    "   . prefer gen_tags over easytags unless
    "     file 'vimrc_prefer_easytags' is present
    "   . to use gen_tags, need executables 'global' and 'gtags'
    "   . to use easytags, need executable 'ctags'
    if     dn#rc#tagPlugin('<sfile>:p:h') ==# 'easytags'
        call dein#add('xolox/vim-easytags')
    elseif dn#rc#tagPlugin('<sfile>:p:h') ==# 'gen_tags'
        call dein#add('jsfaint/gen_tags.vim')
    elseif dn#rc#tagPlugin('<sfile>:p:h') is v:null
        call dn#rc#warn(['Did not load a tag generator plugin'])
    endif
    " bundles: version control    {{{2
    " - gitgutter : git giff symbols in gutter    {{{3
    call dein#add('airblade/vim-gitgutter', {
                \ 'if' : '    executable("git")'
                \      . '&&  ('
                \      . '      ('
                \      . '            !has("nvim")'
                \      . '        &&  v:version > 704'
                \      . '        &&  has("patch-7.4.1826")'
                \      . '      )'
                \      . '      ||'
                \      . '      has("nvim")'
                \      . '    )',
                \ })
    " - fugitive : git integration    {{{3
    call dein#add('tpope/vim-fugitive', {
                \ 'if' : 'executable("git")',
                \ })
    " bundles: clang support    {{{2
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['c', 'cpp', 'objc']}
    call dein#add('zchee/deoplete-clang', {
                \ 'if'      : 'has("nvim")',
                \ 'depends' : ['deoplete.nvim'],
                \ })
    " bundles: docbook support    {{{2
    " - snippets : docbook5 snippets    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['docbk']}
    call dein#add('jhradilek/vim-snippets')
    " - docbk : docbook5 support    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['docbk']}
    call dein#add('jhradilek/vim-docbk')
    " - dn-docbk : docbook5 support    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['docbk']}
    call dein#add('dnebauer/vim-dn-docbk', {
                \ 'depends' : ['vim-dn-utils'],
                \ })
    " bundles: go support    {{{2
    " - vim-go : language support    {{{3
    "   . on 23 October 2018 vim-go plugin began issuing a startup warning if
    "     nvim version < 0.3.1 (when debian testing had version 0.2.2), so
    "     suppress plugin version warning with global plugin variable
    call dein#add('fatih/vim-go', {
                \ 'on_ft'    : ['go'],
                \ 'hook_add' : 'let g:go_version_warning = 0',
                \ })
    " - deoplete-go : deoplete helper    {{{3
    call dein#add('zchee/deoplete-go', {
                \ 'if'        : 'has("nvim")',
                \ 'on_source' : ['vim-go'],
                \ 'build'     : 'make',
                \ })

    " bundles: html support    {{{2
    " - html5 : html5 support    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['html']}
    call dein#add('othree/html5.vim')
    " - sparkup : condensed html parser    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['html']}
    call dein#add('rstacruz/sparkup')
    " - emmet : expand abbreviations    {{{3
    call dein#add('mattn/emmet-vim', {
                \ 'on_ft' : ['html', 'css'],
                \ })
    " - matchtagalways : highlight tag pairs    {{{3
    call dein#add('Valloric/MatchTagAlways', {
                \ 'on_ft' : ['html', 'xhtml', 'xml', 'jinja'],
                \ })
    " bundles: java support    {{{2
    " - javacomplete2 - completion    {{{3
    call dein#add('artur-shaik/vim-javacomplete2', {
                \ 'on_ft' : ['java'],
                \ })
    " bundles: javascript support    {{{2
    " - tern + jsctags : javascript tag generator    {{{3
    " - jsctags install details    {{{4
    "   . provides tag support for javascript
    "   . is installed by npm as binaries
    "     - npm requires node.js which is no longer supported on cygwin
    "     - so cannot install jsctags on cygwin
    "   . requires tern_for_vim
    "   . is reinstalled whenever tern is updated - see tern install next
    "   . npm install command used below assumes npm is configured to
    "     install in global mode without needing superuser privileges
    " - tern install details    {{{4
    "   . is installed by npm
    "     - npm requires node.js which is no longer supported on cygwin
    "     - so cannot install tern on cygwin
    "   . npm install command used below assumes npm is configured to
    "     install in global mode without needing superuser privileges
    "   . update of tern is used as trigger to reinstall jsctags
    " - install    {{{4
    "   . cannot test for cygwin in dein#add 'if' statement
    "   . doing so results in 'E48: Not allowed in sandbox
    if !dn#rc#cygwin()
		" - cannot lazy load as per |dein#check_lazy_plugins()|
		"   else would load {'on_ft': ['javascript', 'javascript.jsx']}
        call dein#add('ternjs/tern_for_vim', {
                    \ 'if'               : '!has("nvim")',
                    \ 'hook_post_update' : 'call dn#rc#buildTernAndJsctags()',
                    \ })
        call dein#add('carlitux/deoplete-ternjs', {
                    \ 'if'               : 'has("nvim")',
                    \ 'on_ft'            : ['javascript', 'javascript.jsx'],
                    \ 'depends'          : ['deoplete.nvim'],
                    \ 'hook_source'      : 'call dn#rc#configureTernjs()',
                    \ 'hook_post_update' : 'call dn#rc#buildTernjs()',
                    \ })
    endif
    " bundles: json support    {{{2
    " - vim-json : json highlighting/indenting    {{{3
        call dein#add('elzr/vim-json', {
                    \ 'on_ft' : ['json', 'jsonl', 'jsonp'],
                    \ })
    " bundles: latex support    {{{2
    " - vimtex : latex support    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['tex','latex']}
    " - vimtex issues warning if tex_flavor not set
    let g:tex_flavor = 'latex'
    call dein#add('lervag/vimtex')
    " - dn-latex : latex support    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['tex', 'latex']}
    call dein#add('dnebauer/vim-dn-latex', {
                \ 'depends' : ['vim-dn-utils'],
                \ })
    " bundles: lua support    {{{2
    " - ftplugin : lua support    {{{3
    call dein#add('xolox/vim-lua-ftplugin', {
                \ 'on_ft' : ['lua'],
                \ })
    " - manual : language support    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['lua']}
    call dein#add('indiefun/vim-lua-manual')
    " - lua : improved lua 5.3 syntax and indentation support    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['lua']}
    call dein#add('tbastos/vim-lua')
    " - dn-lua : lua support    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['lua']}
    call dein#add('dnebauer/vim-dn-lua', {
                \ 'depends' : ['vim-dn-utils'],
                \ })
    " bundles: markdown support    {{{2
    " - vim-pandoc : pandoc integration    {{{3
    "   . uses panzer
    call dein#add('vim-pandoc/vim-pandoc', {
                \ 'if'               : 'v:version >= 704 && has("python3")',
                \ 'on_ft'            : ['markdown', 'markdown.pandoc'],
                \ 'hook_post_update' : 'call dn#rc#buildPandoc()',
                \ })
    " - vim-pandoc-syntax : pandoc md syntax    {{{3
    call dein#add('vim-pandoc/vim-pandoc-syntax', {
                \ 'if'    : 'v:version >= 704 && has("python3")',
                \ 'on_ft' : ['markdown', 'markdown.pandoc'],
                \ })
    " - vim-pandoc-after : third-party plugin integration    {{{3
    call dein#add('vim-pandoc/vim-pandoc-after', {
                \ 'if'    : 'v:version >= 704 && has("python3")',
                \ 'on_ft' : ['markdown', 'markdown.pandoc'],
                \ })
    " - markdown2ctags : tag generator    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['markdown', 'markdown.pandoc']}
    call dein#add('jszakmeister/markdown2ctags')
    " - dn-md-utils : markdown utilities    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['markdown', 'markdown.pandoc']}
    call dein#add('dnebauer/vim-dn-md-utils', {
                \ 'depends' : ['vim-dn-utils'],
                \ })
    " - previm : realtime preview    {{{3
    call dein#add('kannokanno/previm', {
                \ 'on_ft'   : ['markdown', 'markdown.pandoc'],
                \ 'depends' : ['open-browser.vim'],
                \ 'on_cmd'  : ['PrevimOpen'],
                \ })
    " - toc : generate table of contents    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['markdown', 'markdown.pandoc'],
    "                      'on_cmd': ['GenTocGFM', 'GenTocRedcarpet',
    "                                 'UpdateToc', 'RemoveToc']}
    call dein#add('mzlogin/vim-markdown-toc')
    " bundles: perl support    {{{2
    " - perl : perl support    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['perl']}
    call dein#add('vim-perl/vim-perl', {
                \ 'hook_post_update' : 'call dn#rc#perlContrib()',
                \ })
    " - dn-perl : perl support    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['perl']}
    call dein#add('dnebauer/vim-dn-perl', {
                \ 'depends' : ['vim-dn-utils'],
                \ })
    " - perlhelp : provide help with perldoc    {{{3
    call dein#add('vim-scripts/perlhelp.vim', {
                \ 'if'    : 'executable("perldoc")',
                \ 'on_ft' : ['perl'],
                \ })
    " - syntastic-perl6 : syntax hecking for perl6    {{{3
    if dn#rc#lintEngine() ==# 'syntastic'
        call dein#add('nxadm/syntastic-perl6', {
                    \ 'if'    : '!has("nvim")',
                    \ 'on_ft' : ['perl6'],
                    \ })
    endif
    " bundles: php support    {{{2
    " - phpctags : tag generation    {{{3
    "   . cannot test for cygwin in dein#add 'if' statement
    "   . doing so results in 'E48: Not allowed in sandbox
    if !dn#rc#cygwin()
        call dein#add('vim-php/tagbar-phpctags.vim', {
                    \ 'if'    : 'executable("curl")',
                    \ 'on_ft' : ['php'],
                    \ 'build' : 'make',
                    \ })
        "           build 'phpctags' executable
        "           build fails in cygwin
    endif
    " bundles: python support    {{{2
    "  - jedi : autocompletion    {{{3
    call dein#add('davidhalter/jedi-vim', {
                \ 'if'               : '!has("nvim")',
                \ 'on_ft'            : ['python'],
                \ 'hook_post_update' : 'call dn#rc#buildJedi()',
                \ })
    " - deoplete-jedi : deoplete helper    {{{3
    "   . do not check for python3 in nvim (see note above at 'nvim issues')
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['python']}
    call dein#add('zchee/deoplete-jedi', {
                \ 'if'               : '    has("nvim")'
                \                    . ' && executable("python3")',
                \ 'depends'          : ['deoplete.nvim'],
                \ 'hook_post_update' : 'call dn#rc#buildJedi()',
                \ })
    " - pep8 : indentation support    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': 'python'}
    call dein#add('hynek/vim-python-pep8-indent')
    " bundles: tiddlywiki support    {{{2
    " tiddlywiki-ftplugin : wikitext support    {{{3
    " - can't lazy load as no 'plugin' directory
    call dein#add('dnebauer/vim-tiddlywiki-ftplugin')
    " bundles: tmux support    {{{2
    " navigator : split navigation    {{{3
    call dein#add('christoomey/vim-tmux-navigator')
    " tmux : tmux.conf support    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['tmux']}
    call dein#add('tmux-plugins/vim-tmux')
    " bundles: vimhelp support    {{{2
    " - vimhelplint : lint for vim help    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['help'], 'on_cmd': ['VimhelpLint']}
    call dein#add('machakann/vim-vimhelplint')
    " bundles: xml support    {{{2
    " - xml : xml support    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['xml']}
    call dein#add('vim-scripts/xml.vim')
    " - matchtagalways : highlight tag pairs    {{{3
    "   . defined in html support section
    " bundles: xquery support    {{{2
    " - indentomnicomplete : autoindent and omnicomplete    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['xquery']}
    call dein#add('vim-scripts/XQuery-indentomnicompleteftplugin')
    " bundles: zsh support    {{{2
    " - deoplete-zsh : deoplete helper    {{{3
	"   . cannot lazy load as per |dein#check_lazy_plugins()|
	"     else would load {'on_ft': ['zsh']}
    call dein#add('zchee/deoplete-zsh')
  " close dein    {{{2
  call dein#end()
  call dein#call_hook('source')  " as per |dein-options-hook_source|
  call dein#save_state()
endif
" required settings    {{{2
filetype on
filetype plugin on
filetype indent on
syntax enable
" call post-source hooks    {{{2
augroup dein_config
    autocmd!
    autocmd VimEnter * call dein#call_hook('post_source')
augroup END
" install new bundles on startup    {{{2
if dein#check_install()
    call dein#install()
endif

" SUBSIDIARY CONFIGURATION FILES:    " {{{1
call dn#rc#source(dn#rc#vimPath('home').'/rc', resolve(expand('<sfile>:p')))

" FINAL CONFIGURATION:    {{{1
" set filetype to 'text' if not known    {{{2
augroup vrc_unknown_files
    autocmd!
    autocmd BufEnter *
                \ if &filetype == "" |
                \   setlocal ft=text |
                \ endif
augroup END

" set colour column    {{{2
" - placing this line in subsidiary configuration files has no effect,
"   but placed here it works
" - note: &colorcolumn was set in subsidiary config file 'align.vim'
if exists('+colorcolumn')
    highlight ColorColumn term=Reverse ctermbg=Yellow guibg=LightYellow
endif    " }}}2
" }}}1

" vim:foldmethod=marker:
